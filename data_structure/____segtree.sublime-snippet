<snippet>
	<content><![CDATA[
template<class T, T (*op)(T, T), T (*e)()>
class segtree {
private:
	int n, size;
	vector<T> data;
	void update(int k) {
		data[k] = op(data[2*k], data[2*k + 1]);
	}
public:
	segtree(int n) : segtree(vector<T>(n, e())) {}
	segtree(const vector<T> &v) : n(v.size()) {
		size = 1 << (32 - __builtin_clz(n));
		data.resize(2*size, e());
		for (int i = 0; i < n; i++)
			data[size + i] = v[i];
		for (int i = size; !!--i; )
			update(i);
	}
	void set(int p, T x) {
		assert(0 <= p && p < n);
		data[p += size] = x;
		while (p >>= 1) update(p);
	}
	T get(int p) {
		assert(0 <= p && p < n);
		return data[p + size];
	}
	T prod(int l, int r) {
		assert(0 <= l && l <= r && r <= n);
		T sml = e(), smr = e();

		l += size, r += size;
		for (; l < r; l >>= 1, r >>= 1) {
			if (l & 1) sml = op(sml, data[l++]);
			if (r & 1) smr = op(data[--r], smr);
		}
		return op(sml, smr);
	}
	T all_prod() { return data[1]; }
	template<bool (*f)(T)> int max_right(int l) {
		assert(0 <= l && l <= n);
		if (l == n) return n;
		T sm = e(); l += size;
		do {
			l = l / (l & -l);
			if (!f(op(sm, data[l]))) {
				while (l < size) {
					l = 2*l;
					if (f(op(sm, data[l]))) {
						sm = op(sm, data[l++]);
					}
				}
				return l - size;
			}
			sm = op(sm, data[l++]);
		} while ((l & -l) != l);
		return n;
	}
	template<bool (*f)(T)> int min_left(int r) {
		assert(0 <= r && r <= n);
		if (r == 0) return 0;
		T sm = e(); r += size;
		do {
			r = max(1, r / (r & -r) - 1);
			if (!f(op(data[r], sm))) {
				while (r < size) {
					r = 2*r + 1;
					if (f(op(data[r], sm))) {
						sm = op(data[r--], sm);
					}
				}
				return r + 1 - size;
			}
			sm = op(data[r], sm);
		} while ((r & -r) != r);
		return 0;
	}
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>segtree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>

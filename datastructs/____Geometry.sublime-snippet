<snippet>
	<content><![CDATA[
namespace {$0
	int sign(ld x) { return x < -eps ? -1 : x>eps; }

	struct Point {
		ld x, y; // M(x, y)
		Point(ld x = 0, ld y = 0) : x(x), y(y) {}
		Point rotate(ld theta) const {
			ld _x = x*cos(theta) - y*sin(theta); // M: (OA, OM) == theta
			ld _y = x*sin(theta) + y*cos(theta); return Point(_x, _y); }
		bool operator==(const Point &b) { return x == b.x && y == b.y; }

		Point operator+(const Point &b) { return Point(x + b.x, y + b.y); }
		Point operator-(const Point &b) { return Point(x - b.x, y - b.y); }
		Point operator*(const ld &k) { return Point(x * k, y * k); }
		Point operator/(const ld &k) { return Point(x / k, y / k); }
	};

	struct Vec {
		ld x, y; // AB = (x, y)
		Vec(Point M) : x(M.x), y(M.y) {} // OM
		Vec(ld x = 0, ld y = 0) : x(x), y(y) {}
		ld length() const { return sqrt(x*x + y*y); }
		Vec operator-() const { return Vec(-x, -y); }

		Vec operator+(const Vec &b) { return Vec(x + b.x, y + b.y); }
		Vec operator-(const Vec &b) { return Vec(x - b.x, y - b.y); }
		ld operator*(const Vec &b) { return x*b.x + y*b.y; } // dot
		ld operator/(const Vec &b) { return x*b.y - y*b.x; } // cross
		ld operator^(const Vec &b) { return atan2(*this/b,*this*b); }
	};

	struct Line {
		ld a, b, c; // d: ax + by = c
		Line(Vec v) : Line(Point(), Point(v.x, v.y)) {}
		Line(ld a = 0, ld b = 0, ld c = 0) : a(a), b(b), c(c) {}
		Line operator-(const Point &A) { return Line(b, -a, b*A.x - a*A.y); }
		Line(Point A, Point B) : Line(B.y-A.y, A.x-B.x, A.x*B.y - A.y*B.x) {}
	};
} // structures for geometry
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>Geometry</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
<snippet>
	<content><![CDATA[
struct fenwick {$0
    int n; vector<ll> data;

    fenwick(int _n) : n(_n), data(_n) {}
    template<class T> fenwick(vector<T> d)
    : n(d.size()), data(vector<ll>(all(d))) {
        for (int i = 1; i <= n; i++) {
            if (i + (i & -i) > n) continue;
            data[i + (i & -i) - 1] += data[i - 1];
        }
    }

    void add(int p, ll x) {
        for (p++; p <= n; p += p & -p)
            data[p - 1] += x;
    }

    ll sum(int r) {
        ll ans = 0;
        for (; r > 0; r -= r & -r)
            ans += data[r - 1];
        return ans;
    }

    ll sum(int l, int r) {
        return sum(r) - sum(l);
    }

    int upper_bound(ll sum) {
        int ans = 0;
        for (int k = 30; --k >= 0;) {
            if ((ans | (1 << k)) >= n) continue;
            if (sum >= data[(ans | (1 << k)) - 1])
                sum -= data[(ans |= 1 << k) - 1];
        }
        return ans;
    }
    int lower_bound(ll sum) {
        return upper_bound(sum - 1);
    }
};
/* usage: Fenwick Tree

fenwick tree is 0-indexed

fenwick(N): N nodes whose values are initialized with 0
fenwick(V): initialize and calculate BIT for vector V

add(p, x): v[p] += x
sum(l, r) = sum of [l, r); sum(r) = sum(0, r)

upper_bound(sum): minimum value of r -> sum(r) >  sum
lower_bound(sum): minimum value of r -> sum(r) >= sum
*/
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>fenwick</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<scope>source.c++</scope>
</snippet>
